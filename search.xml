<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C#基础</title>
      <link href="/2020/06/14/c-ji-chu-yi-he-xin-c/"/>
      <url>/2020/06/14/c-ji-chu-yi-he-xin-c/</url>
      
        <content type="html"><![CDATA[<h1 id="1-我推荐使用的编辑器–vsCode"><a href="#1-我推荐使用的编辑器–vsCode" class="headerlink" title="1.我推荐使用的编辑器–vsCode"></a>1.我推荐使用的编辑器–vsCode</h1><blockquote><h3 id="1-vscode安装使用流程："><a href="#1-vscode安装使用流程：" class="headerlink" title="1.vscode安装使用流程："></a>1.vscode安装使用流程：</h3><blockquote><ol><li>点击这个链接—–<a href="https://code.visualstudio.com/" target="_blank" rel="noopener" title="vscode下载地址">下载地址</a> 选择自己对应版本下载</li><li>输出<strong>chinese</strong>安装中文插件，重启vscode就行了<img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1592132123554&amp;di=4867b54cafd1645a9cb30ce0914f27e2&amp;imgtype=0&amp;src=http%3A%2F%2Fpic2.zhimg.com%2Fv2-e7dd9b8d3134d6b20a34c9d134509509_b.jpg" alt=""></li><li>选中图片中的按钮并且输入<strong>c#</strong>安装第一个<img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1592132220691&amp;di=352d9f6fc44aa51d812bc82ceaa7e91d&amp;imgtype=0&amp;src=http%3A%2F%2Fimg.wandouip.com%2F1872659-de2325a59d64fa4a5a8c9cab9338d336.png" alt=""></li><li>在任何盘下建立一个空文件夹用来存储c#代码，并用vscode打开它<img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=3293468802,973457957&amp;fm=26&amp;gp=0.jpg" alt=""></li><li>在菜单栏上选择终端，新建终端，在终端里面输入dotnet new console就创建了一个控制台应用程序你会在左侧文件中看到各种文件，我们在Program文件中编写即可</li><li>点击这个链接有更详细的vs-code编写c#代码的教程<a href="https://www.cnblogs.com/yunquan/p/10872743.html" target="_blank" rel="noopener">vscode怎么编写代码教程</a></li></ol></blockquote></blockquote><h1 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h1><blockquote><h3 id="1-什么是变量："><a href="#1-什么是变量：" class="headerlink" title="1.什么是变量："></a>1.什么是变量：</h3><blockquote><p>大家都知道变量就是一个可变的内存空间，我们不可能在平时写代码的时候总是写对应内存的16进制地址吧，而且我们不可能背住吧，因此发明了变量这个东西来表示那块可变的内存空间比如像下面的代码示例一样:</p><pre class=" language-cs"><code class="language-cs">'int a=5'//其中a这个变量就代表那块内存，5代表那块内存中存放的东西，int代表那块内存存放什么类型的数据类型</code></pre></blockquote><h3 id="2-基本变量的初始化-关于引用变量的初始化，在学类的时候详解"><a href="#2-基本变量的初始化-关于引用变量的初始化，在学类的时候详解" class="headerlink" title="2.基本变量的初始化(关于引用变量的初始化，在学类的时候详解):"></a>2.基本变量的初始化(关于引用变量的初始化，在学类的时候详解):</h3><blockquote><p>定义方式:数据类型 标识符 = 初值;</p><blockquote><p>大家注意一点不像c语言代码,c#中的局部变量在<strong>使用之前必须进行初始化</strong>，什么叫局部变量可以理解为在<strong>Main</strong>或<strong>其它方法</strong>中定义的变量,不然会报错。<br>例如下面的代码:</p><pre class=" language-cs"><code class="language-cs">using System;namespace Blog代码书写{   class Program   {       static void Main(string[] args)       {           int a;//正确应该写成int a=5;           Console.WriteLine(a);//在控制台上打印变量a并且换行，这里会报错，原因是没有初始化变量a       }   }}</code></pre><p>除了局部变量当然还有全局变量，和c\c++语言全局变量不同的是:c#作为纯面向对象的语言,他的的全局变量是写在类里面，方法外面的，<br>由于这个主题我们主要讨论面向过程，类还未涉及，就先不考虑类和全局变量，但他是后面所有c#语法的精髓。<br>c#的基本数据类型:<br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1592136534080&amp;di=47658a44dafafda8dc9bf5f657d97902&amp;imgtype=0&amp;src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D300640475%2C767369212%26fm%3D214%26gp%3D0.jpg" alt=""><br>基本上记住<strong>int long char string  float double bool</strong>常用就够了，其他不懂在去谷歌搜索就完事了</p><blockquote><p><strong>int long</strong>代表整数 <strong>char string</strong>代表字符型和字符串型 <strong>float double bool</strong>代表浮点型和bool类型<br>除了上面的类型c#还有一种javascript的推断类型：var</p></blockquote><pre class=" language-cs"><code class="language-cs">using System;namespace Blog代码书写{ class Program {     static void Main(string[] args)     {        int a;        Console.WriteLine(a);//在控制台上打印变量a并且换行        var b=5;var此时代表int，由于要推断所以开始你就要赋值，不然报错，和c++ auto相同     } }}</code></pre><h6 id="额外扩展"><a href="#额外扩展" class="headerlink" title="额外扩展:"></a><strong>额外扩展:</strong></h6><p>很多同学可能说它是动态类型，但其实不是的哈，他只是编译器的一种优化策略<br>比如有的变量名字很长,程序员累死，所以微软就借鉴了javascript的变量<br>他会在编译的时候自动把int来代替var<br>像这种在编译期间就能知道类型的变量，他们在<strong>真正运行开始的时候</strong>系统就会为它分配存储空间，<br>至于动态类型，它在<strong>编译乃至运行开始期间</strong>都不会为它分配变量，只有一步步执行到这条语句才会为它分配存储空间<br>在这之前他是任何类型<br>他在反射和依赖注入实现中非常重要，后面我们会实现一个cat版本的依赖注入容器<br>例如<br><code>dynamic c=5;//dynamic就是动态类型，使用动态类型很可能会降低运行速度</code></p></blockquote></blockquote><h3 id="3-变量的作用域"><a href="#3-变量的作用域" class="headerlink" title="3.变量的作用域"></a>3.变量的作用域</h3><blockquote><p>简单来说就是一个再各自的花括号内有效，如下代码所示:</p><blockquote><pre class=" language-cs"><code class="language-cs">using System;namespace Blog代码书写{   class Program   {      static void Main(string[] args)      {        {           int a=5;        }        Console.Write(a);//由于a作用域实在a中，检测不到      }   }}</code></pre><blockquote><p>但是要注意一点:<strong>局部变量</strong>不能跨级声明变量代码如下:</p></blockquote><pre class=" language-cs"><code class="language-cs">namespace Blog代码书写{   class Program   {      static void Main(string[] args)      {        for(int i=0;i<5;i++){        //由于已经在上级的申明了i所有下级就不能再次申明，这不像c语言，大家注意，并且这是局部变量，全局是可以覆盖的        }        int i=6;      }  }}</code></pre><blockquote><p>下面代码由于是同级所以不会报错</p></blockquote><pre class=" language-cs"><code class="language-cs">namespace Blog代码书写{   class Program   {      static void Main(string[] args)      {        for(int i=0;i<5;i++){        }        for(int i=0;i<5;i++){        }      //同级不会报错      }  }}</code></pre></blockquote></blockquote><h3 id="4-变量的一些细节补充"><a href="#4-变量的一些细节补充" class="headerlink" title="4.变量的一些细节补充:"></a>4.变量的一些细节补充:</h3><blockquote><p>本小节知识只是讨论了在方法中的变量，还没有讨论全局变量,在后面一章讲解<br>1.</p></blockquote></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c#基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c#基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
