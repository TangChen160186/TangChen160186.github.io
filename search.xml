<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C#基础1---程序结构的介绍</title>
      <link href="/2020/06/14/c-ji-chu-1-cheng-xu-jie-gou-de-jie-shao/"/>
      <url>/2020/06/14/c-ji-chu-1-cheng-xu-jie-gou-de-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="C-基础1—程序结构的介绍"><a href="#C-基础1—程序结构的介绍" class="headerlink" title="C#基础1—程序结构的介绍"></a>C#基础1—程序结构的介绍</h1><blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在学习之前你应该<a href="https://">学会如何创建一个c#应用程序程序</a><br>跟着我走我保证你在第40个系列的时候建立一个这样的程序(包括前端和后端)<br><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3777727606,956048944&amp;fm=26&amp;gp=0.jpg" alt="桌面应用程序哔哩哔哩"><br>或者:<br><img src="https://img-blog.csdnimg.cn/20191018153023983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3piNzU2OTk5MzU1,size_16,color_FFFFFF,t_70" alt="空洞骑士游戏"></p></blockquote></blockquote><blockquote><blockquote><p><strong>欢迎大佬评论区骂我，哈哈</strong></p></blockquote><h2 id="程序结构介绍正式开始-暂时不理解没关系，只要知道是从Main函数开始执行和Console-WriteLine-是打印东西就可以了"><a href="#程序结构介绍正式开始-暂时不理解没关系，只要知道是从Main函数开始执行和Console-WriteLine-是打印东西就可以了" class="headerlink" title="程序结构介绍正式开始:- - -暂时不理解没关系，只要知道是从Main函数开始执行和Console.WriteLine()是打印东西就可以了"></a>程序结构介绍正式开始:- - -暂时不理解没关系，只要知道是从Main函数开始执行和Console.WriteLine()是打印东西就可以了</h2><blockquote><p>当我们创建一个和c#应用程序的时候默认是这样一段代码</p><pre class=" language-cs"><code class="language-cs">using System;namespace ConsoleApp1 //程序的名称空间，默认和你的应用程序{   class Program //程序的主类，由于c#是纯面向对象的语言，所以必须以类开头   {       static void Main(string[] args)//程序的入口       {           Console.WriteLine("Hello World!");//在控制台上打印出Hello Word并且换行       }   }}</code></pre><h2 id="1-开始解释上面的基本程序构造"><a href="#1-开始解释上面的基本程序构造" class="headerlink" title="1.开始解释上面的基本程序构造:"></a>1.开始解释上面的基本程序构造:</h2><blockquote><h3 id="using-System"><a href="#using-System" class="headerlink" title="using System"></a>using System</h3><blockquote><p>引入命名空间:导入之后你就可以用System下面的类了:<br>这个类是应用程序的基类:包括了各种数据类型(int等等),还有一些基本控制台输入输出类<br>比如main函数中的Console类，其中WriteLine是这个类中的公共静态方法，作用就是在控制台上打印内容</p></blockquote><h3 id="namespace"><a href="#namespace" class="headerlink" title="namespace"></a>namespace</h3><blockquote><p>就像上面所示，加入没这个东西，很容易导入相同的类名，就会报错</p></blockquote><h3 id="Main"><a href="#Main" class="headerlink" title="Main:"></a>Main:</h3><blockquote><p>注意这个Main是大写哈，.net每种应用程序(web、upw、wpf、console等等)都是从Main函数开始的<br>Main中args表示你在启动应用程序时候可以传入的变量(环境变量、配置文件变量、命令行参数等等)</p></blockquote><h3 id="program"><a href="#program" class="headerlink" title="program:"></a>program:</h3><blockquote><p>表示一种数据类型(或称其为模板),</p></blockquote></blockquote><h2 id="2-C语言-静态类型的语言-的运行方式-了解"><a href="#2-C语言-静态类型的语言-的运行方式-了解" class="headerlink" title="2.C语言(静态类型的语言)的运行方式- - -  了解"></a>2.C语言(静态类型的语言)的运行方式- - -  了解</h2><blockquote><p>相信大家都学过c语言，那么c语言是如何运行的呢：<br>首先c语言通过c编译器(MinGW或其他编译器)编译之后<br>生成相应的obj文件，然后obj文件与其他操作系统以及c库文件链接<br>最终生成.exe等可执行文件<br>当可执行文件运行时，他会把它写入内存，然后操作系统调用它的main()函数,才真正的运行<br><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=3079319214,3031949334&amp;fm=26&amp;gp=0.jpg" alt="c语言的编译运行过程"></p></blockquote><h2 id="3-C-语言-介于解释和编译型之间的语言-的运行方式-了解"><a href="#3-C-语言-介于解释和编译型之间的语言-的运行方式-了解" class="headerlink" title="3.C#语言(介于解释和编译型之间的语言)的运行方式- - - 了解"></a>3.C#语言(介于解释和编译型之间的语言)的运行方式- - - 了解</h2><blockquote><p>C#语言它会通过编译器把它编译成IL(中间语言)–(是另一种介于操作系统和源码之间的宁一种语言，不是机器码)，<br>IL最终会存储在一个程序集中，这个程序集除了IL代码还包括<strong>元数据和可选的资源文件</strong><br>元数据用来描述IL代码中的类型，就像int是描述c语言中的整型，<br>这种描述针对3个方面：类型定义的描述、类型成员的描述和类型引用成员的描述<br>可选的资源文件IL代码中使用的其他数据，如图片文件等外设文件。<br>有人肯定很奇怪IL代码到底是什么代码:可以这样理解:.net 语言包括c#、vb 、F#等等语言<br>他们在编译后最终生成的都是Il代码<br>这些IL代码更具不同的操作系统通过CLR(运行时)中最终生成不同的.exe(可执行文件)或者.dll(动态链接库文件)<br>生成Il代码的好处就是能过够在不同的操作系统中执行时候可以很好的编译成相适应的代码:也就是跨平台<br>JIT就是他的CLR(运行时)中的JIT编译器，能够将IL编译成本机代码，<br>通过JIT编译后的本机代码存放到操作系统的缓冲区，这样除了第一次，后面的几次都不会重新通过JIT重新编译IL代码了，<br>这个你们坑定遇到过啊:第一次运行时卡死人，后面很快<br>学过java的同学肯定知道了JVM和JIT很像吧，哈哈，本来c#和java就是互相抄袭嘛<br><img src="https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=1351506502,1375587219&amp;fm=26&amp;gp=0.jpg" alt="c#代码编译运行过程"><br><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1592162092209&amp;di=76a9163e319acba2e1e1809adf595e36&amp;imgtype=0&amp;src=http%3A%2F%2Ftxt22262.book118.com%2F2017%2F0611%2Fbook113463%2F113462908.jpg" alt="java代码编译运行过程"></p></blockquote><h2 id="4-C-和c语言两种类型语言的比较-知道就好"><a href="#4-C-和c语言两种类型语言的比较-知道就好" class="headerlink" title="4.C#和c语言两种类型语言的比较- - -知道就好"></a>4.C#和c语言两种类型语言的比较- - -知道就好</h2><blockquote><p>静态类型很明显快于解释型嘛，因为要托管运行嘛，再次编译嘛，但都现在这个年代了，差距应该不大了</p></blockquote></blockquote></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> c#基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c#基础语法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
